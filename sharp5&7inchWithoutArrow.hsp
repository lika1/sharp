#include "hgimg3.as"	;３Ｄを使いたいとき、ＨＳＰ拡張プラグインのヘッダーファイルが必要
#include "hspda.as"		;csvを分析するためライブラリー
#include "mod_joystick.as"

	////////////////////////////////////////////
	//定義区
	//すべての変数や関数はここで定義をしておきます、モデルもここで読み込みます。
	////////////////////////////////////////////
	randomize				;乱数の初期化
	onexit	*exit	;プログラム終了時の割り込み処理（×ボタンを押すとそこ（指定ラベル）に飛ぶ）
	
	////////////////////////////////変数の定義////////////////////////////////
	
	#const OVER_TIME (1)					;一回実験の時間（min単位）
	
	;---------setting_data関連--------------------------------------------
	;テキストからデータを読み込む
	setting_data = ""
	notesel setting_data					;設定情報を保存するメモリノートパッド命令のバッファ名
	noteload "config/setting_new_data.txt"	;「setting_data」という変数に「setting_new_data.txt」の中身をロードする
	
	ddim set_data,12						;テキストから抜き出したデータを一時的に保管したりする変数を定義
	repeat									;（始）テキストデータから設定情報を取り出すループ（始）
		noteget set_data(cnt), cnt			;1行ずつデータを取り出し，一時的に保管する為の変数 set_dataに代入
		if(set_data(cnt) = "") : break		;データが終わったらループを抜け出す
	loop									;（終）テキストデータから設定情報を取り出すループ（終）
	
	win_xsize       = int(set_data(0))		;画面サイズ（x）
	win_ysize       = int(set_data(1))		;画面サイズ（y）
	lead_car_speed1 = set_data(2)			;先行車の速度（最低速度）
	lead_car_speed2 = set_data(3)			;先行車の速度（最高速度）
	change_speed    = set_data(4)			;先行車の速度変化の段階数
	adjust_range    = set_data(5)			;先行車の速度調整間隔時間
	limit_min_range = set_data(6)			;先行車との挙動限界距離（最短）
	limit_max_range = set_data(7)			;先行車との挙動限界距離（最長）
	min_range       = set_data(8)			;先行車との適正距離（最短）
	max_range       = set_data(9)			;先行車との適正距離（最長）
	left_car_speed  = set_data(10)			;左車線を走行している車の時速
	right_car_speed = set_data(11)			;右車線を走行している車の時速
	
	//設定した値を変数へ代入する
	;追従作業のフィードバック
	BLUE_FRAME_OFFSET_X	 = (win_xsize/4)/2								;画面中心からのオフセット　X
	BLUE_FRAME_OFFSET_Y	 = (win_ysize/4)/2								;画面中心からのオフセット　Y
	BLUE_FRAME_WIDTH	 = int(0.0977*win_xsize/4)					;横の長さ
	BLUE_FRAME_HEIGHT	 = int(0.0912*win_ysize/4)					;縦の長さ
	BLUE_FRAME_THICKNESS = int(0.0153*(win_xsize/4)*(win_xsize/4)/1000)		;線の太さ

	SHAKAN_MIN = double(min_range)/0.165							;枠から出たとみなす距離
	SHAKAN_MAX = double(max_range)/0.165							;枠から出たとみなす距離
	LIM_SHAKAN_MIN = double(limit_min_range)/0.165					;枠から出たとみなす距離
	LIM_SHAKAN_MAX = double(limit_max_range)/0.165					;枠から出たとみなす距離
	
	BLUE_FRAME_CENTER_X	=	BLUE_FRAME_OFFSET_X ;+ (ginfo_sizex/2)
	BLUE_FRAME_CENTER_Y	=	BLUE_FRAME_OFFSET_Y ;+ (ginfo_sizey/2)
	
	;カウントダウン番号画像の大きさ・座標用変数
	sign_xsize = int(0.3868 * win_xsize/4)			;画像の大きさ(X座標）
	sign_ysize = int(0.3529 * win_ysize/4)			;画像の大きさ(Y座標）
	sign_xpos  = (win_xsize/4)/2					;画像の座標(X座標）
	sign_ypos  = int(0.326 * win_ysize/4)			;画像の座標(Y座標）
	
	;左車線・右車線の自動車の速度用変数
	L_CAR_S = 0.2777778 * double(left_car_speed) * 0.015 * 6.0		;左車線を走行してる車の移動量
	R_CAR_S = 0.2777778 * double(right_car_speed) * 0.015 * 6.0		;右車線を走行してる車の移動量
	
	
	;---------car_appear.csv関連--------------------------------------------
	;後車の出現タイミングを読み込む
	#const CAR_APPEAR_ROW      (3)			;データの行
	#const CAR_APPEAR_COL      (5)			;データの列
	sdim car_appear_buffer,10000
	notesel car_appear_buffer				
	noteload "config/car_appear.csv"
	
	sdim car_appear,CAR_APPEAR_ROW,CAR_APPEAR_COL		;車の出現タイミングを保存する二次元配列、毎行の内容は「出現タイミング（秒単位）」、「左か右か（L/R）」、「出現するとき自車との距離」、「スピード」
	ddim car_appear_time,CAR_APPEAR_ROW					;処理しやすいために「出現タイミング（秒単位）」だけを保存する一次元配列
	repeat
		cy=cnt
		noteget tmp,cnt						;先に一行を読み込む
		if(tmp = "") : break
		sdim t,CAR_APPEAR_COL,CAR_APPEAR_COL
		csvstr t,tmp
		repeat CAR_APPEAR_COL
			if(cnt=0){
				car_appear_time(cy) = int(t(cnt))
			}
			car_appear(cnt,cy)=t(cnt)
		loop
	loop									
	ddim car_appear_check,CAR_APPEAR_ROW					;車がすでに登場したかどうかのチェック配列
	button_click = ""										;後車に気付いたかどうかのボタンフラグ
	LisRed = 0
	RisRed = 0
	;---------それ以外--------------------------------------------
	screen 0,(win_xsize),(win_ysize),0,0,0  					;フロント画面の作成
	gsel 0,1				;フロント画面アクティブ
	color : boxf					;画面全体を黒く塗りつぶす
	
	;配列
	dim ROAD,3											;道路
    dim HODOU_LEFT,20									;左側　歩道
    dim HODOU_RIGHT,20									;右側　歩道
    dim TREE_LEFT,50									;左側　木
	dim TREE_RIGHT,50									;右側　木

	notesel save_data									;サンプリングデータ保存用
	noteadd "総サンプリング回数,goからの時間[ms],走行距離,スイッチの状態,車間距離,自車速度,トラッキング,ペダルの状態,ペダルの踏み込み具合[%],メモ,左車の位置,右車の位置"
	#const sampling  500								;データ記録のサンプリング時間(ms単位)
	
	kyori = 0.0 : kyori1 = 0.0 : kyori2 = 0.0 : jisoku2 = 0.0			;時速計算用変数
	aida = 0.0
	
	steering_ang = 33089		;ハンドルをまっすぐにした状態の値
	hs = 0.000000200			;ハンドルの曲がり具合
	
	sokudo = -3.5				;3.5 --> 約77.4 km/h
	speed = 0.0 : car_speed = 0.0 : max_speed = 0.0
	cnt_n = 0 
	st_ex = 0					;実験開始しましたか
	time_m = 0.0 : time_s = 0.0
	time_set = 0.0
	
	player_pos_x == 0 : player_pos_y == 0 : player_pos_z == 0	;カメラの位置
	player_ang_x == 0 : player_ang_y == 0 : player_ang_z == 0	;カメラの向き　

	camera_pos_x == 0 : camera_pos_y == 0 : camera_pos_z == 0	;カメラの位置
	camera_ang_x == 0 : camera_ang_y == 0 : camera_ang_z == 0	;カメラの向き　　

	road_loop　== 0 : road_loop2  == 0							;背景のループ用
	hodou_loop == 0 : hodou_loop2 == 0							;
	tree_loop  == 0 : tree_loop2  == 0							;
	frame = 0
	mmload "sound/Bell.wav"
	
	////////////////////////////////関数の定義////////////////////////////////
	#module
	
	//モデルを読み込む関数、失敗すれば提示します。
	//引数:xファイルのパス
	//返し値:モデルID
	#defcfunc readModel str path
   		addxfile model_id,path												
		if  model_id < 0 : dialog "失敗："+path,1,"読み込み失敗"
    return  model_id
 
 	//アルファチャンネルのない画像(bmp、jpgなど)をテクスチャーとしてを読み込む関数、失敗すれば提示します。
 	//引数:画像のパス
	//返し値:テクスチャ―ID
	#defcfunc readTex str path
   		texload path												
		if stat < 0 : dialog "失敗："+path,1,"読み込み失敗"
    return stat
 
    //アルファチャンネル付き画像(png、tgaなど)をテクスチャーとしてを読み込む関数、失敗すれば提示します。
 	//引数:画像のパス
	//返し値:テクスチャ―ID
	#defcfunc readTexAlpha str path
   		texload2 path											
		if stat < 0 : dialog "失敗："+path,1,"読み込み失敗"
    return stat

	#global
	
	////////////////////////////////３Ｄモデル(背景)の準備////////////////////////////////
	hgini ;プラグインの初期化（現在のウインドウでHGIMG3を初期化）
	
	;---------各種テクスチャ--------------------------------------------
	;テクスチャフォント
	setfont 16,16,12,1											;オリジナルフォント定義
	chr = readTex("pic/fontchr.bmp")							;フォントテクスチャの登録
	
	;カウントダウン用画像
	setuv 0,0,264,181
	ready_go = readTex("pic/go.bmp")							;Go!
	sec_ago1  = readTex("pic/1time.bmp")  						;①
	sec_ago2  = readTex("pic/2time.bmp") 						;②
	sec_ago3  = readTex("pic/3time.bmp") 						;③
	sec_ago15 = readTex("pic/15time.bmp") 						;⑩
	
	;---------背景のモデル--------------------------------------------
	;空
	clscolor $AFBFFC						;背景色の設定
	sky_model = readModel("model/skybox.x")	;空のモデルの読み込み
	modelshade sky_model,0					;モデルのシェーディングモードの設定
	regobj SKY,sky_model					;空の登録
	setscale SKY, 30, 30, 30				;空の大きさの設定
	setpos SKY, 0, 10, 0					;空の位置の設定
	setefx SKY,$500							;Zバッファを更新しない
	objproj SKY,1							;オブジェクトのプロジェクション変更　通常のZクリップを無効にする

	;道路の準備(道路は３つのタイルをループさせている→０後方，１足元，２前方）
	roadTex = readTexAlpha("pic/road2(3line)_onew.bmp")		;道路のテクスチャの読み込み
	addmesh road_model,1, 12.56, 16, 90, 1520, roadTex		;道路の設定
	regobj ROAD.0,road_model,OBJ_GROUND			;道路の登録
	regobj ROAD.1,road_model,OBJ_GROUND			;
	regobj ROAD.2,road_model,OBJ_GROUND			;
	setpos ROAD.0, 0, 0.2, -38*40				;道路の位置の設定
	setpos ROAD.1, 0, 0.2, 0					;
	setpos ROAD.2, 0, 0.2, 38*40				;

	;歩道の準備
	hodou_model = readModel("model/hodou.x")				;歩道のモデルの読み込み
	repeat 20												;左側20個　右側20個 歩道のオブジェクトを作る
		;右側の歩道											;
		regobj   HODOU_RIGHT(19-cnt),hodou_model,OBJ_STATIC	;
		setpos   HODOU_RIGHT(19-cnt), 55, 0, 70*(9-cnt)		;
		setang   HODOU_RIGHT(19-cnt),  0, M_PI, 0			;
    	setscale HODOU_RIGHT(19-cnt), 12, 12, 25			;
		;左の歩道											;
		regobj   HODOU_LEFT(19-cnt),HODOU_model,OBJ_STATIC	;
		setpos   HODOU_LEFT(19-cnt),-55, 0, 70*(9-cnt)		;
		setang   HODOU_LEFT(19-cnt),  0, 0, 0				;
    	setscale HODOU_LEFT(19-cnt), 12, 12, 25				;
    loop													;

	;木の準備
	treeTex = readTexAlpha("pic/tree.tga")											;木のテクスチャの登録
	addplate tree_model,1,15,30,0,0,255,255,treeTex									;木の登録
	repeat 50
		;右側50個
		regobj TREE_RIGHT(49-cnt), tree_model, OBJ_STATIC|OBJ_TREE|OBJ_LATE			;
		setpos TREE_RIGHT(49-cnt), 40+0.5*rnd(20), -14.5, 25*(24-cnt)+0.5*rnd(10)	;
		;左側50個																	;
		regobj TREE_LEFT(49-cnt),  tree_model, OBJ_STATIC|OBJ_TREE|OBJ_LATE			;
		setpos TREE_LEFT(49-cnt), -40-0.5*rnd(20), -14.5, 25*(24-cnt)+0.5*rnd(10)	;
	loop							;
	
	;---------車両の読み込み--------------------------------------------
	;先行車両
    car_model1 = readmodel("model/evo8-silver.x")	;先行車両のモデルの読み込み
    regobj Leading_CAR,car_model1,OBJ_MOVE			;先行車両の登録
    setpos Leading_CAR, 0, 0, 310					;先行車両の初期位置の設定
    setang Leading_CAR, 0, M_PI, 0					;先行車両の向きの設定
    setscale Leading_CAR, 5.5, 5.5, 5.5				;先行車両の大きさ

	;他の車
	car_modelRed = readmodel("model/evo8-red.x")		;追い越し車線走行車両のモデルの読み込み
	car_modelBlack = readmodel("model/evo8-black.x")	;走行車線走行車両のモデルの読み込み

	;車両A－右車線
	regobj R_CAR,car_modelRed,OBJ_STATIC				;追い越し車線走行車両の登録
	setpos R_CAR, -22, 0, 0							;追い越し車線走行車両の初期位置の設定
 	setang R_CAR, 0, M_PI, 0						;追い越し車線走行車両の向きの設定
	setscale R_CAR, 5.5, 5.5, 5.5					;追い越し車線走行車両の大きさの設定
	;車両B－左車線
	regobj L_CAR,car_modelBlack,OBJ_STATIC				;走行車線走行車両の登録
	setpos L_CAR, 22, 0, 0							;走行車線走行車両の初期位置の設定
 	setang L_CAR, 0, M_PI, 0						;走行車線走行車両の向きの設定
	setscale L_CAR, 5.5, 5.5, 5.5					;走行車線走行車両の大きさの設定
	
	;矢印（自車）
	setuv 0,0,63,92                    ;矢印の画像を読み込む位置
	addplate yajirushi_model,1,5,35    ;矢印の大きさ ID,モード,横,縦
	arrowTex = readTex("pic/none.png")	
	regobj player,yajirushi_model
	setang player,-M_PI/2,M_PI,0		;矢印の向き???
	
	;カメラの準備
	cammode CAM_MODE_NORMAL				;カメラモードの設定
	setpos HGOBJ_CAMERA, 0,-5,-30	;カメラ位置の設定
	setang HGOBJ_CAMERA,0,deg2rad(180),0	;カメラの向きの設定
    //cammode CAM_MODE_AUTOMOVE,player
    setwork HGOBJ_CAMERA, 35, M_PI, -5		;カメラの視点,前後,周囲,高さ
    //setdir HGOBJ_CAMERA,0,-8,0			;セット位置（角度）？横,高さ,前後

	;ライトの準備
	setang HGOBJ_LIGHT,4.9,M_PI,0		;ライトの向きの設定
    setscale HGOBJ_LIGHT,150,150,150	;ライトの色の設定
	setdir HGOBJ_LIGHT,50,50,50			;ライトのアンビエント色の設定
	
	
	////////////////////////////////////////////
	//実行区
	//ここでプログラムを実行します
	////////////////////////////////////////////

	////////////////////////////////実行開始////////////////////////////////
*start_ex
	;Enterを押すことを待ちます
	repeat
		hgdraw
	
		getpos HGOBJ_CAMERA,camera_pos_x,camera_pos_y,camera_pos_z	;カメラの位置(座標)を取得
		getang HGOBJ_CAMERA,camera_ang_x,camera_ang_y,camera_ang_z	;カメラの角度を取得
	
		getpos player,player_pos_x,player_pos_y,player_pos_z	;自車の位置(座標)を取得
		getang player,player_ang_x,player_ang_y,player_ang_z	;自車の前向きの角度を取得
	
		title "pos(c/p)   x:"+ camera_pos_x+"/"+player_pos_x +"   y:"+ camera_pos_y+"/"+player_pos_y +"  z:"+camera_pos_z+"/"+player_pos_z +"     angle(c/p)   x:"+ camera_ang_x+"/"+player_ang_x +"   y:"+ camera_ang_y+"/"+player_ang_y+"  z:"+camera_ang_z+"/"+player_ang_z

		
		hggettime time,0					;hgini命令を通過してからの経過時間を 1ms 単位で取得	 ※ただし、上限は100000 msまで,それを超えると0 msから数え直す
		hggettime count,1					;上限である100000 msを超えた回数の取得
		time = count*100000+time			;現在の経過時間の算出
			
		getkey enter,13	
		if enter=1: hgsync 5 : push_time=time : break	;Enterを押したら、今まで経った時間を記録しておい、ループから抜き出す
		hgsync 5	;時間待ち（処理が速くなり過ぎないように）

	loop
	
	;描画のメインループ-----------------------------------------------------------------------------------------
*main
	
	;----経過時間の取得----
	;起動時からの経過時間[ms]
	hggettime time,0		;hgini命令を通過してからの経過時間を 1ms 単位で取得	 ※ただし、上限は100000 msまで,それを超えると0 msから数え直す
	hggettime count,1		;上限である100000 msを超えた回数の取得
	time = count*100000+time-push_time	;現在の経過時間の算出
	;実験経過時間[s]&[min]
	if st_ex = 1 : elasped_time = (time - start_time)/1000				;総実験経過時間[sec]　=　(time_m)*60 ＋ (time_s)秒
	time_m = elasped_time/60							;実験経過時間[min単位]
	time_s = elasped_time\60							;実験経過時間[sec単位]
	
	if(time_m >= OVER_TIME){
		gosub *exit
	}
	
	kyori1 = camera_pos_z 
	
	getpos HGOBJ_CAMERA,camera_pos_x,camera_pos_y,camera_pos_z	;カメラの位置(座標)を取得
	getang HGOBJ_CAMERA,camera_ang_x,camera_ang_y,camera_ang_z	;カメラの角度を取得
	
	getpos player,player_pos_x,player_pos_y,player_pos_z	;自車の位置(座標)を取得
	getang player,player_ang_x,player_ang_y,player_ang_z	;自車の前向きの角度を取得
	
	title "pos(c/p)   x:"+ camera_pos_x+"/"+player_pos_x +"   y:"+ camera_pos_y+"/"+player_pos_y +"  z:"+camera_pos_z+"/"+player_pos_z +"     angle(c/p)   x:"+ camera_ang_x+"/"+player_ang_x +"   y:"+ camera_ang_y+"/"+player_ang_y+"  z:"+camera_ang_z+"/"+player_ang_z
	
	kyori2 = camera_pos_z

	;--------サブルーチンジャンプ---------------------------------------------------------------------------------
	gosub *camera_control	;カメラ操作
	gosub *background		;背景のループ
	gosub *alldraw			;描画

	//時速計算 
	jisoku2 = -(39.996 * speed +0.1324)					;speedの値から時速を算出※ただしPCの処理能力により変わる恐れアリ
	if jisoku2<=0 : jisoku2=0							;speedが0だとマイナスになるので修正

	if data.8 = 512 : goto *exit					;ハンドルのレバーを倒すと終了

	kyori = kyori + speed*cos(camera_ang_y)

	aida = kyori2 - kyori1
	
	//title "経過時間 = "+elasped_time+" (s)    speed : "+ speed +"  brake_on : "+ brake_on+"   jisoku: "+ aida*0.166/0.015*3.6
	
	if (st_ex = 1)&&(time - start_time - s_time*sampling) >= 0 : gosub *sampling_data	;データ保存用サンプリング時間
	
	camera_pos_z2 = camera_pos_z	;現在のcamera_pos_zと、次のcamera_pos_zを比べるためにcamera_pos_z2に内容を保存	
	
goto *main


/*******************************************************************************
-------以下、goto/gosub命令によるジャンプ先ラベル-------------------------------
*******************************************************************************/
	
//--------操作------------------------------------------------------------------
*camera_control
	//キーボードで操作
	stick key,15	;操作キーの設定（押しっぱなしでも検出）
	if 1=key : addang player,0.0,0.008,0.00		;カメラの左旋回
	if 4=key : addang player,0.0,-0.008,0.0		;カメラの右旋回
	if(2=key)&(speed<29050) : speed = speed -0.006615		;カメラの加速
	if 8=key : speed = speed + 0.00926154					;カメラの減速
	
	
	if (key = 64) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "L")) : button_click += "L" : mmplay		;Ctrlキーを押す
	if (key = 16) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "R")) : button_click += "R" : mmplay		;スペースキーを押す
	
	//ジョイスティック（ハンドル）で操作
	joyGetPosEx data,0	;ハンドル（ゲームパット）の設定
	jyoutai = stat			;ステアリングとPCが接続されていたら「0」が入る
	;☆★☆★☆★☆ステアリング型コントローラによるハンドル操作☆★☆★☆★☆
	if jyoutai=0 : addang player, 0.0, hs*(steering_ang-double(data.2)), 0.0 
	
	;----ペダル型コントローラによる操作----
	pedal = " "		;ブレーキの判定
	pedal_per = 0.0
	if (data.3 < 32511) : pedal = "アクセル" : pedal_per = (32511 - data.3)*100/32511		;ペダルの状態＆ペダルの踏み込み具合(アクセル）
	if (data.3 > 32511) : pedal = "ブレーキ" : pedal_per = (data.3)*100/32767 - 100		;ペダルの状態＆ペダルの踏み込み具合（ブレーキ）
	
	if (data.8 & 0x00000001) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "R")) : button_click += "R" : mmplay
	if (data.8 & 0x00000002) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "R")) : button_click += "R" : mmplay 
	if (data.8 & 0x00000004) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "R")) : button_click += "R" : mmplay 
	if (data.8 & 0x00000008) & ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "R")) : button_click += "R" : mmplay
	
	pov = data(10)
	if (pov & 0xFFFF)!0xFFFF {
		if ((pov=31500)|(pov=    0)|(pov= 4500))& ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "L")) : button_click += "L" : mmplay
		if ((pov= 4500)|(pov= 9000)|(pov=13500))& ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "L")) : button_click += "L" : mmplay
		if ((pov=13500)|(pov=18000)|(pov=22500))& ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "L")) : button_click += "L" : mmplay
		if ((pov=22500)|(pov=27000)|(pov=31500))& ( (button_click != "LR") & (button_click ! "RL") & (button_click ! "L")) : button_click += "L" : mmplay
	}
	;----操作による位置情報への反映----
	;アクセルの踏み込み量に合わせて最大速度を調整
	if (31427 <= data.3)&&(data.3 < 32511) : max_speed = -0.1257269		; 0  ～ 5km
	if (30344 <= data.3)&&(data.3 < 31427) : max_speed = -0.2514538		; 5  ～ 10km
	if (29260 <= data.3)&&(data.3 < 30344) : max_speed = -0.3771807		;10  ～ 15km
	if (28176 <= data.3)&&(data.3 < 29260) : max_speed = -0.5029076		;15  ～ 20km
	if (27093 <= data.3)&&(data.3 < 28176) : max_speed = -0.6286345		;20  ～ 25km
	if (26009 <= data.3)&&(data.3 < 27093) : max_speed = -0.7543614		;25  ～ 30km
	if (24925 <= data.3)&&(data.3 < 26009) : max_speed = -0.8800883		;30  ～ 35km
	if (23841 <= data.3)&&(data.3 < 24925) : max_speed = -1.0058152		;35  ～ 40km
	if (22758 <= data.3)&&(data.3 < 23841) : max_speed = -1.1315421		;40  ～ 45km
	if (21674 <= data.3)&&(data.3 < 22758) : max_speed = -1.257269		;45  ～ 50km
	if (20590 <= data.3)&&(data.3 < 21674) : max_speed = -1.3829959		;50  ～ 55km
	if (19507 <= data.3)&&(data.3 < 20590) : max_speed = -1.5087228		;55  ～ 60km
	if (18423 <= data.3)&&(data.3 < 19507) : max_speed = -1.6344497		;60  ～ 65km
	if (17339 <= data.3)&&(data.3 < 18423) : max_speed = -1.7601766		;65  ～ 70km
	if (16256 <= data.3)&&(data.3 < 17339) : max_speed = -1.8859035		;70  ～ 75km
	if (15172 <= data.3)&&(data.3 < 16256) : max_speed = -2.0116304		;75  ～ 80km
	if (14088 <= data.3)&&(data.3 < 15172) : max_speed = -2.1373573		;80  ～ 85km
	if (13004 <= data.3)&&(data.3 < 14088) : max_speed = -2.2630842		;85  ～ 90km
	if (11921 <= data.3)&&(data.3 < 13004) : max_speed = -2.3888111		;90  ～ 95km
	if (10837 <= data.3)&&(data.3 < 11921) : max_speed = -2.514538		;95  ～ 100km
	if ( 9753 <= data.3)&&(data.3 < 10837) : max_speed = -2.6402649		;100 ～ 105km
	if ( 8670 <= data.3)&&(data.3 <  9753) : max_speed = -2.7659918		;105 ～ 110km
	if ( 7586 <= data.3)&&(data.3 <  8670) : max_speed = -2.8917187		;110 ～ 115km
	if ( 6502 <= data.3)&&(data.3 <  7586) : max_speed = -3.0174456		;115 ～ 120km
	if ( 5419 <= data.3)&&(data.3 <  6502) : max_speed = -3.1431725		;120 ～ 125km
	if ( 4335 <= data.3)&&(data.3 <  5419) : max_speed = -3.2688994		;125 ～ 130km
	if ( 3251 <= data.3)&&(data.3 <  4335) : max_speed = -3.3946263		;130 ～ 135km
	if ( 2167 <= data.3)&&(data.3 <  3251) : max_speed = -3.5203532		;135 ～ 140km
	if ( 1084 <= data.3)&&(data.3 <  2167) : max_speed = -3.6460801		;140 ～ 145km
	if (    0 <= data.3)&&(data.3 <  1084) : max_speed = -3.771807		;145 ～ 150km

	;アクセルの踏みこみ量により１フレームでの移動距離を調整
	if (data.3 < 32511)&&(jyoutai=0) {
		if(max_speed < speed){
			if(speed < 0) : speed = speed - 6.0 * 0.002205 * (double(32511 - data.3)/65022.00)
			if(speed = 0) : speed = - (0.000551 * 6.0)
		}
		;アクセルを緩めた時の減速処理
		if(max_speed > speed) : speed = speed + 0.00926154 * 0.2
	}
	
	;エンジンブレーキ（アクセルから足を離したときの処理）
	if(data.3 = 32511) : speed = speed + 0.00926154 * 0.4

	;ブレーキを踏んだ時の処理
	if (data.3 > 32511)&&(jyoutai=0) : speed = speed + 6.0 * 0.00308718 * (double(data.3 - 32511)/65022.00)
	
	if(speed>0) : speed=0.0
	addpos player,double(speed*sin(camera_ang_y)),0.0,double(speed*cos(camera_ang_y))
		
	;-----------壁にぶつかった場合に強制的に道路に戻す-----------
	if (camera_pos_x>47.5){
			setpos player,47.5,0,camera_pos_z
			setang player,-M_PI/2,M_PI,0
	}else {
		if (camera_pos_x<-47.5){
			setpos player,-47.5,0,camera_pos_z
			setang player,-M_PI/2,M_PI,0
		}
	}
		

return


//--------背景のループ----------------------------------------------------------
*background
	;----空のループ----
	setpos SKY,camera_pos_x,10,camera_pos_z		;カメラの現在位置を中心に、位置を移動させる

	;----道路のループ----
	road_loop = (abs((int(camera_pos_z)+38*40/2)/(38*40))\3)						;
	if(camera_pos_z+38*40/2 < 0) : road_loop=2-road_loop							;
																					;
	if(road_loop!=road_loop2){														;
		if(camera_pos_z >= camera_pos_z2) : addpos ROAD.road_loop2,0,0, 38*40*3		;
		if(camera_pos_z <  camera_pos_z2) : addpos ROAD.road_loop ,0,0,-38*40*3		;
	}																				;
	road_loop2 = road_loop															;


	;----歩道のループ----
	hodou_loop = (abs((int(camera_pos_z)+62/2)/62)\20)																				;
	if(camera_pos_z+62/2 < 0) : hodou_loop=19-hodou_loop																			;
																																	;
	if(hodou_loop!=hodou_loop2){																									;
		if(camera_pos_z >= camera_pos_z2) : addpos HODOU_RIGHT.hodou_loop2,0,0, 62*20 : addpos HODOU_LEFT.hodou_loop2,0,0, 62*20	;
		if(camera_pos_z <  camera_pos_z2) : addpos HODOU_RIGHT.hodou_loop ,0,0,-62*20 : addpos HODOU_LEFT.hodou_loop ,0,0,-62*20	;
	}																																;
	hodou_loop2 = hodou_loop
	
	;----木のループ----
	tree_loop = (abs((int(camera_pos_z)+25/2)/25)\50)																			;
	if(camera_pos_z+25/2 < 0) : tree_loop=49-tree_loop																			;
																																;
	if(tree_loop!=tree_loop2){																									;
		if(camera_pos_z >= camera_pos_z2) : addpos TREE_RIGHT.tree_loop2,0,0, 25*50 : addpos TREE_LEFT.tree_loop2,0,0, 25*50	;
		if(camera_pos_z <  camera_pos_z2) : addpos TREE_RIGHT.tree_loop ,0,0,-25*50 : addpos TREE_LEFT.tree_loop ,0,0,-25*50	;
	}																															;
	tree_loop2 = tree_loop
	
	;----先行車挙動----
	getpos Leading_CAR,CAR_pos_x,CAR_pos_y,CAR_pos_z
	if (camera_pos_z<20) {
	}
	else {
		;先行車の速度を決定
		if(v_set = 0){
			car_sokudo = double(lead_car_speed1) + (double(lead_car_speed2) - double(lead_car_speed1))/double(change_speed) * rnd(int(change_speed))
			v_set = 1
		}
	
		;時速→速度用変数
		if(car_sokudo ! car_sokudo2){
			car_speed =  0.2777778 * double(car_sokudo) * 0.015 * 6.0			;速度用変数を時速から算出
			car_sokudo2 = car_sokudo
		}
		;先行車の挙動を確定
		if(elasped_time >= time_set + adjust_range) : v_set = 0 : time_set = time_set + adjust_range
		if(CAR_pos_z-camera_pos_z)<LIM_SHAKAN_MAX and (CAR_pos_z-camera_pos_z)>LIM_SHAKAN_MIN : CAR_pos_z = CAR_pos_z2+car_speed
		if(CAR_pos_z-camera_pos_z)>LIM_SHAKAN_MAX : CAR_pos_z=camera_pos_z+LIM_SHAKAN_MAX-7			;305の理由は310に近すぎると挙動が…
		if(CAR_pos_z-camera_pos_z)<LIM_SHAKAN_MIN : CAR_pos_z=camera_pos_z+LIM_SHAKAN_MIN+7			;55の理由は50に近すぎると挙動が…
	}
	setpos Leading_CAR,0,0,CAR_pos_z
	CAR_pos_z2=CAR_pos_z
	
	if (CAR_pos_z-camera_pos_z)<=SHAKAN_MIN : color 255,0,0 : syakan=1
	if (CAR_pos_z-camera_pos_z)>=SHAKAN_MAX : color 0,0,255 : syakan=2
	if (CAR_pos_z-camera_pos_z)>SHAKAN_MIN && (CAR_pos_z-camera_pos_z)<SHAKAN_MAX : color 0,255,0 : syakan=0

	
	repeat CAR_APPEAR_ROW
		if( (car_appear_time(cnt) <= elasped_time)&( car_appear_check(cnt) = 0 ) ){
			car_appear_check(cnt) = 1.0
			if(car_appear(1,cnt)="L"){
				if(car_appear(4,cnt)="R"){
					LisRed = 1
					setobjmodel L_CAR,car_modelRed
				}
				if(car_appear(4,cnt)="B"){
					LisRed = 0
					setobjmodel L_CAR,car_modelBlack
				}

				setpos L_CAR, 22, 0, camera_pos_z-int(car_appear(2,cnt))		;自身の座標から100座標後ろに設置
				L_CAR_S = 0.2777778 * double(car_appear(3,cnt)) * 0.015 * 6.0		;左車線を走行してる車の移動量
			}
			if(car_appear(1,cnt)="R"){
				if(car_appear(4,cnt)="R"){
					RisRed = 1
					setobjmodel R_CAR,car_modelRed
				}
				if(car_appear(4,cnt)="B"){
					RisRed = 0
					setobjmodel R_CAR,car_modelBlack
				}
	
				setpos R_CAR, -22, 0, camera_pos_z-int(car_appear(2,cnt))		;自身の座標から100座標後ろに設置
				R_CAR_S = 0.2777778 * double(car_appear(3,cnt)) * 0.015 * 6.0		;右車線を走行してる車の移動量
			}
		}
	loop

	;----右車線の車----
	addpos R_CAR,0.0,0.0,R_CAR_S 					;右車線の車は110km/hで走行？
	getpos R_CAR,r_car_x,r_car_y,r_car_z					;右車線の車の座標を取得
	
	;----左車線の車----
	addpos L_CAR,0.0,0.0,L_CAR_S 					;左車線の車は100km/hで走行？
	getpos L_CAR,l_car_x,l_car_y,l_car_z					;左車線の車の座標を取得
	
return


//--------フレーム描画為ののサブルーチン---------------------------------------
*alldraw
	
	hgdraw 
	
	getpos player,player_pos_x,player_pos_y,player_pos_z	;自車の位置(座標)を取得
	getang player,player_ang_x,player_ang_y,player_ang_z	;自車の前向きの角度を取得
	
	hgview 800,0,800,600
	//バックカメラの設定
	getang HGOBJ_CAMERA,camera_ang_x,camera_ang_y,camera_ang_z	;カメラの角度を取得
	setang HGOBJ_CAMERA,camera_ang_x, player_ang_y - deg2rad(150),camera_ang_z; カメラ向き設定
	hgdraw 1
	
	hgview 1600,0,800,600
	//バックカメラの設定
	getang HGOBJ_CAMERA,camera_ang_x,camera_ang_y,camera_ang_z	;カメラの角度を取得
	setang HGOBJ_CAMERA,camera_ang_x, player_ang_y - deg2rad(180),camera_ang_z; カメラ向き設定
	hgdraw 1
	
	hgview 2400,0,800,600
	//バックカメラの設定
	getang HGOBJ_CAMERA,camera_ang_x,camera_ang_y,camera_ang_z	;カメラの角度を取得
	setang HGOBJ_CAMERA,camera_ang_x, player_ang_y - deg2rad(-150),camera_ang_z; カメラ向き設定
	hgdraw 1
	
	//フロントカメラの設定
	hgview 0,0,800,600
	setpos HGOBJ_CAMERA, player_pos_x, player_pos_y-5, player_pos_z-30	; カメラ位置設定
	setang HGOBJ_CAMERA,0,player_ang_y,0	; カメラ向き設定
	hgdraw 1
	
	;----カウントダウン----
	;200座標を過ぎたら10カウントしたら実験開始
	if (camera_pos_z > 200) && (cnt_n = 0){
		cnt_n = 15							;カウント回数=10
		sp_time = time						;スタート地点（z=200）を過ぎた時間
	}
	pos sign_xpos, sign_ypos : gmode 3,264,181,255
	if (camera_pos_z > 200) && ((time - sp_time)/1000) = (cnt_n - 15) : hgrotate sec_ago15,0,0,0, sign_xsize, sign_ysize	;⑩
	if (camera_pos_z > 200) && ((time - sp_time)/1000) = (cnt_n - 3) : hgrotate sec_ago3,0,0,0, sign_xsize, sign_ysize		;③
	if (camera_pos_z > 200) && ((time - sp_time)/1000) = (cnt_n - 2) : hgrotate sec_ago2,0,0,0, sign_xsize, sign_ysize		;②
	if (camera_pos_z > 200) &&  ((time - sp_time)/1000) = (cnt_n - 1) : hgrotate sec_ago1,0,0,0, sign_xsize, sign_ysize		;①
	if (camera_pos_z > 200) && ((time - sp_time)/1000) = cnt_n{
		hgrotate ready_go,0,0,0, sign_xsize, sign_ysize																		;Go!	
		if st_ex = 0 : start_time = time : st_ex = 1
	}
	
	;----車間距離判定----
	gmode 3,100,100,75
	hgrect BLUE_FRAME_CENTER_X,BLUE_FRAME_CENTER_Y-BLUE_FRAME_HEIGHT/2-10,0,BLUE_FRAME_WIDTH+BLUE_FRAME_THICKNESS,BLUE_FRAME_THICKNESS	;上
	hgrect BLUE_FRAME_CENTER_X,BLUE_FRAME_CENTER_Y+BLUE_FRAME_HEIGHT/2-10,0,BLUE_FRAME_WIDTH+BLUE_FRAME_THICKNESS,BLUE_FRAME_THICKNESS	;下
	hgrect BLUE_FRAME_CENTER_X-BLUE_FRAME_WIDTH/2,BLUE_FRAME_CENTER_Y-10,0,BLUE_FRAME_THICKNESS,BLUE_FRAME_HEIGHT						;左
	hgrect BLUE_FRAME_CENTER_X+BLUE_FRAME_WIDTH/2,BLUE_FRAME_CENTER_Y-10,0,BLUE_FRAME_THICKNESS,BLUE_FRAME_HEIGHT
	
	;------確認用フィードバック----------------
	fprt "jisoku: "+int(jisoku2)+"km/h",8,70								;自車の時速[km/h]
	fprt "time:"+time_m+" min "+time_s+" sec",8,130							;経過時間を分・秒で表示
	fprt "camera_pos_x: "+camera_pos_x,8,210								;車の走行距離(座標）
	fprt "lead_car_speed: "+car_sokudo+"km/h",8,250							;先行車の時速[km/h]
	
	frame++				;フレーム回数カウント用変数
	hgsync 14	;時間待ち（処理が速くなり過ぎないように）
	
return

//*************************
*sampling_data
	//memは左・右車が自車の後ろにあるかどうかを記録する
	mem=""
	if( ( l_car_z < camera_pos_z ) & ( LisRed = 1 ) ){
		mem += "L"
	}
	if( ( r_car_z < camera_pos_z) & ( RisRed = 1 ) ){
		mem += "R"
	}
	
	;elasped_timeは整数型で、こちらは0.5秒ごとサンプリングしますから、改めて時間をとります
	;起動時からの経過時間[ms]
	hggettime time,0		;hgini命令を通過してからの経過時間を 1ms 単位で取得	 ※ただし、上限は100000 msまで,それを超えると0 msから数え直す
	hggettime count,1		;上限である100000 msを超えた回数の取得
	time = count*100000+time-push_time	;現在の経過時間の算出
	;実験経過時間[s]&[min]
	if st_ex = 1 : elasped_time2 = double((time - start_time))/1000				;総実験経過時間[sec]　=　(time_m)*60 ＋ (time_s)秒
	
	notesel save_data
	//			回数		goからの時間	　走行距離		スイッチの状態		車間距離　　			 自車速度	トラキング		pedal量		pedal_per	mem
	noteadd ""+s_time+","+elasped_time2+","+camera_pos_z+","+button_click+","+(CAR_pos_z-camera_pos_z)+","+speed+","+camera_pos_x+","+pedal+","+pedal_per+","+mem+","+l_car_z+","+r_car_z ,s_time+1,1
	s_time++
	button_click = ""	;後車に気付いたかどうかのボタンフラグをクリアする
return
	
	////////////////////////////////終了前の操作////////////////////////////////
*exit
	notesel save_data
	noteadd "総サンプリング回数,goからの時間[ms],走行距離,スイッチの状態,車間距離,自車速度,トラッキング,ペダルの状態,ペダルの踏み込み具合[%],メモ,左車の位置,右車の位置"
	dialog "*",17,"テキストファイル"	;保存用のダイアログを別ウインドウで表示
	if stat=1 : notesave refstr+".txt"	;ファイル名を記載した場合、その名前のテキストファイル作成
	
	end		;onexitで割り込み処理をする場合、endを書かなければウインドウを閉じれなくなるので注意
	